manimax=gbif("Miconia", "mirabilis")
require(dismo)
manimax=gbif("Miconia", "mirabilis")
pts=micomira[,c("species","lon","lat","municipality", "adm1")]
micomira=gbif("Miconia", "mirabilis")
pts=micomira[,c("species","lon","lat","municipality", "adm1")]
pts=na.exclude(pts)
pts
pts1=na.exclude(pts)
source("https://raw.githubusercontent.com/diogosbr/filtros/master/filt_municip.R")
teste=filt_municip(pts1)
head(teste)
pts1
source("https://raw.githubusercontent.com/diogosbr/filtros/master/filt_municip.R")
teste=filt_municip(pts1)
micomira=gbif("Miconia", "mirabilis")
pts=micomira[,c("species","lon","lat","municipality", "adm1")]
pts=na.exclude(pts)
source("https://raw.githubusercontent.com/diogosbr/filtros/master/filt_municip.R")
pts1=na.exclude(pts)
pts1
pts1$municipality
teste=filt_municip(pts1)
micomira=gbif("Miconia", "mirabilis")
pts=micomira[,c("species","lon","lat","municipality", "adm1")]
pts=na.exclude(pts)
pts=na.exclude(pts)
coordinates(pts)<- ~lon+lat
pts1=as.data.frame(pts)
muni_shape=over(pts,br_mun)[,c('NOMEMUNICP','NOMEUF')]
muni_shape[,1]=as.vector(muni_shape[,1])
muni_shape[,2]=as.vector(muni_shape[,2])
pts1=cbind(pts1,muni_shape)
pts1[,4]=as.vector(pts1[,4])
pts1[,5]=as.vector(pts1[,5])
for(i in 1:dim(pts1)[2]){
pts1[,i]=tolower(pts1[,i])
pts1[,i]=tolower(pts1[,i])
}
if(missing(shape.municipios)){
br_mun=readOGR("./Shapes/brasil_mun_ibge/brasil_mun_ibge.shp")
} else(br_mun=shape.municipios)
br_mun=readOGR("./Shapes/brasil_mun_ibge/brasil_mun_ibge.shp")
br_mun <- spTransform(br_mun, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
proj4string(pts) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
pts1=as.data.frame(pts)
muni_shape=over(pts,br_mun)[,c('NOMEMUNICP','NOMEUF')]
muni_shape[,1]=as.vector(muni_shape[,1])
muni_shape[,2]=as.vector(muni_shape[,2])
pts1=cbind(pts1,muni_shape)
pts1[,4]=as.vector(pts1[,4])
pts1[,5]=as.vector(pts1[,5])
for(i in 1:dim(pts1)[2]){
pts1[,i]=tolower(pts1[,i])
pts1[,i]=tolower(pts1[,i])
}
pts1
pts1$municipality=rm_accent(pts1$municipality)
rm_accent <- function(str,pattern="all") {
# Rotinas e funções úteis V 1.0
# rm.accent - REMOVE ACENTOS DE PALAVRAS
# Função que tira todos os acentos e pontuações de um vetor de strings.
# Parâmetros:
# str - vetor de strings que terão seus acentos retirados.
# patterns - vetor de strings com um ou mais elementos indicando quais acentos deverão ser retirados.
#            Para indicar quais acentos deverão ser retirados, um vetor com os símbolos deverão ser passados.
#            Exemplo: pattern = c("´", "^") retirará os acentos agudos e circunflexos apenas.
#            Outras palavras aceitas: "all" (retira todos os acentos, que são "´", "`", "^", "~", "¨", "ç")
if(!is.character(str))
str <- as.character(str)
pattern <- unique(pattern)
if(any(pattern=="Ç"))
pattern[pattern=="Ç"] <- "ç"
symbols <- c(
acute = "áéíóúÁÉÍÓÚýÝ",
grave = "àèìòùÀÈÌÒÙ",
circunflex = "âêîôûÂÊÎÔÛ",
tilde = "ãõÃÕñÑ",
umlaut = "äëïöüÄËÏÖÜÿ",
cedil = "çÇ"
)
nudeSymbols <- c(
acute = "aeiouAEIOUyY",
grave = "aeiouAEIOU",
circunflex = "aeiouAEIOU",
tilde = "aoAOnN",
umlaut = "aeiouAEIOUy",
cedil = "cC"
)
accentTypes <- c("´","`","^","~","¨","ç")
if(any(c("all","al","a","todos","t","to","tod","todo")%in%pattern)) # opcao retirar todos
return(chartr(paste(symbols, collapse=""), paste(nudeSymbols, collapse=""), str))
for(i in which(accentTypes%in%pattern))
str <- chartr(symbols[i],nudeSymbols[i], str)
return(str)
}
pts1$municipality=rm_accent(pts1$municipality)
pts1$filt="Ok"
pts1
pts1$municipality==pts1$NOMEMUNICP
na.omit(pts1$municipality==pts1$NOMEMUNICP)
for(i in 1:dim(pts1)[1]){
if((pts1$municipality==pts1$NOMEMUNICP)[i]==FALSE){
pts1[i,"filt"]="suspeito"
}
}
for(i in 1:dim(pts1)[1]){
if(na.omit(pts1$municipality==pts1$NOMEMUNICP)[i]==FALSE){
pts1[i,"filt"]="suspeito"
}
}
na.omit(pts1$municipality==pts1$NOMEMUNICP)[i]
na.omit(pts1$municipality==pts1$NOMEMUNICP)
pts1=as.data.frame(pts)
muni_shape=over(pts,br_mun)[,c('NOMEMUNICP','NOMEUF')]
muni_shape[,1]=as.vector(muni_shape[,1])
muni_shape[,2]=as.vector(muni_shape[,2])
pts1=cbind(pts1,muni_shape)
pts1[,4]=as.vector(pts1[,4])
pts1[,5]=as.vector(pts1[,5])
for(i in 1:dim(pts1)[2]){
pts1[,i]=tolower(pts1[,i])
pts1[,i]=tolower(pts1[,i])
}
rm_accent <- function(str,pattern="all") {
# Rotinas e funções úteis V 1.0
# rm.accent - REMOVE ACENTOS DE PALAVRAS
# Função que tira todos os acentos e pontuações de um vetor de strings.
# Parâmetros:
# str - vetor de strings que terão seus acentos retirados.
# patterns - vetor de strings com um ou mais elementos indicando quais acentos deverão ser retirados.
#            Para indicar quais acentos deverão ser retirados, um vetor com os símbolos deverão ser passados.
#            Exemplo: pattern = c("´", "^") retirará os acentos agudos e circunflexos apenas.
#            Outras palavras aceitas: "all" (retira todos os acentos, que são "´", "`", "^", "~", "¨", "ç")
if(!is.character(str))
str <- as.character(str)
pattern <- unique(pattern)
if(any(pattern=="Ç"))
pattern[pattern=="Ç"] <- "ç"
symbols <- c(
acute = "áéíóúÁÉÍÓÚýÝ",
grave = "àèìòùÀÈÌÒÙ",
circunflex = "âêîôûÂÊÎÔÛ",
tilde = "ãõÃÕñÑ",
umlaut = "äëïöüÄËÏÖÜÿ",
cedil = "çÇ"
)
nudeSymbols <- c(
acute = "aeiouAEIOUyY",
grave = "aeiouAEIOU",
circunflex = "aeiouAEIOU",
tilde = "aoAOnN",
umlaut = "aeiouAEIOUy",
cedil = "cC"
)
accentTypes <- c("´","`","^","~","¨","ç")
if(any(c("all","al","a","todos","t","to","tod","todo")%in%pattern)) # opcao retirar todos
return(chartr(paste(symbols, collapse=""), paste(nudeSymbols, collapse=""), str))
for(i in which(accentTypes%in%pattern))
str <- chartr(symbols[i],nudeSymbols[i], str)
return(str)
}
pts1$municipality=rm_accent(pts1$municipality)
pts1
(pts1$municipality==pts1$NOMEMUNICP)[i]==FALSE
(pts1$municipality==pts1$NOMEMUNICP)[i]
(pts1$municipality==pts1$NOMEMUNICP)[1]
(pts1$municipality==pts1$NOMEMUNICP)[144
]
for(i in 1:dim(pts1)[1]){
if((pts1$municipality==pts1$NOMEMUNICP)[i]==FALSE){
pts1[i,"filt"]="suspeito"
}
}
i
(pts1$municipality==pts1$NOMEMUNICP)[i]
for(i in 1:dim(pts1)[1]){
if((pts1$municipality==pts1$NOMEMUNICP)[i]==NA){
pts1[i,"filt"]="suspeito"
}
if((pts1$municipality==pts1$NOMEMUNICP)[i]==FALSE){
pts1[i,"filt"]="suspeito"
}
}
(pts1$municipality==pts1$NOMEMUNICP)[i]
i
is.na(pts1$municipality==pts1$NOMEMUNICP)
pts1=as.data.frame(pts)
muni_shape=over(pts,br_mun)[,c('NOMEMUNICP','NOMEUF')]
muni_shape[,1]=as.vector(muni_shape[,1])
pts1=cbind(pts1,muni_shape)
pts1[,4]=as.vector(pts1[,4])
muni_shape[,2]=as.vector(muni_shape[,2])
pts1[,5]=as.vector(pts1[,5])
for(i in 1:dim(pts1)[2]){
pts1[,i]=tolower(pts1[,i])
pts1[,i]=tolower(pts1[,i])
}
rm_accent <- function(str,pattern="all") {
# Rotinas e funções úteis V 1.0
# rm.accent - REMOVE ACENTOS DE PALAVRAS
# Função que tira todos os acentos e pontuações de um vetor de strings.
# Parâmetros:
# str - vetor de strings que terão seus acentos retirados.
# patterns - vetor de strings com um ou mais elementos indicando quais acentos deverão ser retirados.
#            Para indicar quais acentos deverão ser retirados, um vetor com os símbolos deverão ser passados.
#            Exemplo: pattern = c("´", "^") retirará os acentos agudos e circunflexos apenas.
#            Outras palavras aceitas: "all" (retira todos os acentos, que são "´", "`", "^", "~", "¨", "ç")
if(!is.character(str))
str <- as.character(str)
pattern <- unique(pattern)
if(any(pattern=="Ç"))
pattern[pattern=="Ç"] <- "ç"
symbols <- c(
acute = "áéíóúÁÉÍÓÚýÝ",
grave = "àèìòùÀÈÌÒÙ",
circunflex = "âêîôûÂÊÎÔÛ",
tilde = "ãõÃÕñÑ",
umlaut = "äëïöüÄËÏÖÜÿ",
cedil = "çÇ"
)
nudeSymbols <- c(
acute = "aeiouAEIOUyY",
grave = "aeiouAEIOU",
circunflex = "aeiouAEIOU",
tilde = "aoAOnN",
umlaut = "aeiouAEIOUy",
cedil = "cC"
)
accentTypes <- c("´","`","^","~","¨","ç")
if(any(c("all","al","a","todos","t","to","tod","todo")%in%pattern)) # opcao retirar todos
return(chartr(paste(symbols, collapse=""), paste(nudeSymbols, collapse=""), str))
for(i in which(accentTypes%in%pattern))
str <- chartr(symbols[i],nudeSymbols[i], str)
return(str)
}
pts1$municipality=rm_accent(pts1$municipality)
pts1$filt="Ok"
for(i in 1:dim(pts1)[1]){
if(is.na(pts1$municipality==pts1$NOMEMUNICP)[i]==TRUE){
pts1[i,"filt"]="suspeito"
}
if((pts1$municipality==pts1$NOMEMUNICP)[i]==FALSE){
pts1[i,"filt"]="suspeito"
}
}
pts1
pts1$filt="Ok"
for(i in 1:dim(pts1)[1]){
if(is.na(pts1$municipality==pts1$NOMEMUNICP)[i]==TRUE){
pts1[i,"filt"]="suspeito"
pts1[i,"NOMEMUNICP"]="Fora do Brasil"
pts1[i,"NOMEUF"]="Fora do Brasil"
}
}
for(i in 1:dim(pts1)[1]){
if((pts1$municipality==pts1$NOMEMUNICP)[i]==FALSE){
pts1[i,"filt"]="suspeito"
}
}
pts1
source('~/GitHub/filtros/filt_municip.R', echo=TRUE)
micomira=gbif("Miconia", "mirabilis")
pts=manimax[,c("species","lon","lat","municipality", "adm1")]
pts=micomira[,c("species","lon","lat","municipality", "adm1")]
pts=na.exclude(pts)
teste=filt_municip(pts1)
pts1
pts1=na.exclude(pts)
teste=filt_municip(pts1)
head(teste)
pts1
pts=teste
pts1=pts[pts$filt=="suspeito",]
pts1
head(pts1)
pts1
coordinates(pts1)=lat~lon
coordinates(pts1)=~lat+lon
head(pts1)
class(pts1)
str(pts)
source('~/GitHub/filtros/filt_municip.R', echo=TRUE)
micomira=gbif("Miconia", "mirabilis")
pts=micomira[,c("species","lon","lat","municipality", "adm1")]
pts=na.exclude(pts)
pts1=na.exclude(pts)
teste=filt_municip(pts1)
head(teste)
class(teste)
str(teste)
pts=teste
pts1=pts[pts$filt=="suspeito",]
head(pts1)
pts1
coordinates(pts1)=~lat+lon
pts1
pts1=as.data.frame(pts1)
pts1
pts=teste
pts1=pts[pts$filt=="suspeito",]
head(pts1)
pts1
head(pts1)
coordinates(pts1)<- ~lat+lon
pts=teste
pts=pts[pts$filt=="suspeito",]
pts=teste
pts=pts[pts$filt=="suspeito",]
coordinates(pts)<- ~lat+lon
pts1=as.data.frame(pts)
br_mun=readOGR("./Shapes/brasil_mun_ibge/brasil_mun_ibge.shp")
br_mun <- spTransform(br_mun, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
proj4string(pts) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
muni_shape=over(pts,br_mun)[,c('NOMEMUNICP','NOMEUF')]
muni_shape[,1]=as.vector(muni_shape[,1])
muni_shape[,2]=as.vector(muni_shape[,2])
pts1=cbind(pts1,muni_shape)
pts1[,4]=as.vector(pts1[,4])
pts1[,5]=as.vector(pts1[,5])
for(i in 4:dim(pts1)[2]){
pts1[,i]=tolower(pts1[,i])
pts1[,i]=tolower(pts1[,i])
}
pts1
(pts1$municipality==pts1$NOMEMUNICP)[i]==FALSE
(pts1$municipality==pts1$NOMEMUNICP)
names(pts1)
pts1$municipality==pts1[,9]
for(i in 1:dim(pts1)[1]){
if(is.na(pts1$municipality==pts1[,9])[i]==TRUE){
pts1[i,"filt"]="suspeito"
}
}
for(i in 1:dim(pts1)[1]){
if(is.na(pts1$municipality==pts1[,9])[i]==TRUE){
pts1[i,"filt"]="suspeito"
pts1[i,9]="Fora do Brasil"
pts1[i,9]="Fora do Brasil"
}
}
(pts1$municipality==pts1[,9])[i]==FALSE
pts1[,9]
pts1$municipality
source('~/GitHub/filtros/coord_invertida.R', echo=TRUE)
teste2=invert(teste)
teste2
source('~/GitHub/filtros/coord_invertida.R', echo=TRUE)
teste2=invert(teste)
teste2
manimax=gbif("Manilkara", "maxima")
pts=manimax[,c("species","lon","lat","municipality", "adm1")]
pts1=na.exclude(pts)
pts1
names(pts1)
names(pts1)=c("species"   ,   "lat"     ,     "lon"      ,    "municipality" ,"adm1" )
teste=filt_municip(pts1)
head(teste)
teste2=invert(teste)
teste2
